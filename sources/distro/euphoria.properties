file.patterns.euphoria=*.e;*.ew;*.ex;*.exw;*.eu;*.exu

filter.euphoria=Euphoria (e ex eu ew exw exu)|$(file.patterns.euphoria)|

lexer.$(file.patterns.euphoria)=eiffel

keywordclass.euphoria=atom by constant do else elsif exit global \
include integer object return sequence then to with without \
end for function if procedure type while \
and or xor not \
abort and_bits append arctan atom call \
c_func c_proc call_func call_proc clear_screen close command_line compare cos \
date equal find floor get_key get_pixel getc getenv gets integer length log \
machine_func machine_proc match mem_copy mem_set not_bits object open or_bits \
peek peek4s peek4u pixel platform poke poke4 position power prepend print \
printf profile puts rand remainder repeat routine_id sequence sin sprintf sqrt \
system system_exec tan time trace xor_bits \
call_back define_c_func define_c_proc \
define_c_var free_console open_dll allow_break chdir check_break current_dir \
dir flush lock_file seek unlock_file walk_dir where get get_bytes \
prompt_number prompt_string value wait_key all_palette bk_color cursor \
draw_line ellipse get_position graphics_mode palette polygon scroll sound \
text_color text_rows video_config wrap display_image display_text_image \
get_active_page get_all_palette get_display_page get_screen_char \
put_screen_char read_bitmap save_bitmap save_image save_screen save_text_image \
set_active_page set_display_page allocate allocate_low allocate_string \
atom_to_float32 atom_to_float64 bits_to_int bytes_to_int crash_file \
crash_message dos_interrupt float32_to_atom float64_to_atom free free_low \
get_vector int_to_bits int_to_bytes lock_memory register_block set_rand \
set_vector tick_rate unregister_block use_vesa message_box arccos arcsin \
instance PI reverse sleep sprint get_mouse mouse_events mouse_pointer \
custom_sort sort lower upper wildcard_file wildcard_match

keywords.$(file.patterns.euphoria)=$(keywordclass.euphoria)

# Eiffel styles
# Default
style.eiffel.0=fore:#808080
# Line comment
style.eiffel.1=$(colour.code.comment.line),$(font.code.comment.line)
# Number
style.eiffel.2=$(colour.number)
# Keyword
style.eiffel.3=$(colour.keyword),bold
# String
style.eiffel.4=$(colour.string),$(font.monospace)
# Character
style.eiffel.5=$(colour.char),$(font.monospace)
# Operators
style.eiffel.6=$(colour.operator),bold
# Identifier
style.eiffel.7=
# End of line where string is not closed
style.eiffel.8=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
# Braces are only matched in operator style
braces.eiffel.style=6

# statement.indent.$(file.patterns.eiffel)=5 do else elsif rescue if is loop
# statement.end.$(file.patterns.eiffel)=10 ;
# statement.lookback.$(file.patterns.eiffel)=20
# block.start.$(file.patterns.eiffel)=10 check debug deferred do from if inspect once
# block.end.$(file.patterns.eiffel)=10 end

# command.compile.*.e=compile $(FileName)