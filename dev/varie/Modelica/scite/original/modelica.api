abs(v [Integer|Real]) Is expanded into (if v >= 0 then v else  v).
assert(condition, message) The condition shall be true for successful model evaluations.
cardinality(c) Returns the number of (inside and outside) occurrences of connector instance c.
ceil(x [Real]) Returns the smallest integer not less than x.
change(v) Is expanded into (v<>pre(v)). The same restrictions as for the pre() operator apply.
cross(x,y) Returns the cross product of the 3-vectors x and y.
delay(expr,delayTime [,delayMax]) Returns "expr(time delayTime)" for time>time.start+delayTime and "expr(time.start)" for time<=time.start+delayTime.
der(x) Variable x need to be a subtype of Real, and may not be a discrete-time variable.
diagonal(v) Returns a square matrix with the elements of vector v on the diagonal and all other elements zero.
div(x,y) Returns the algebraic quotient x/y with any fractional part discarded.
edge(b) Is expanded into (b and not pre(b)) for Boolean variable b.
fill(s,n1,n2,n3, ...) Returns the n1 x n2 x n3 x ... array with all elements eq. to scalar or array expression s (ni >= 0).
floor(x) Returns the largest integer not greater than x.
identity(n) Returns the n x n Integer identity matrix, with ones on the diagonal and zeros at the other places.
initial() Returns true during the initialization phase and false otherwise.
Integer(e) Returns the ordinal number of the enumeration value E.enumvalue.
integer(x) Returns the largest integer not greater than x.
isPresent(ident) Returns true if the formal input or output argument ident is present as an actual argument of the function call.
linspace(x1,x2,n) Returns a Real vector with n equally spaced elements.
matrix(A) Returns promote(A,2), if A is a scalar or vector and otherwise the elements of the first two dimensions as a matrix.
max(A) Returns the largest element of array expression A. max(x,y) Returns the largest element of the scalars x and y.
min(A) Returns the smallest element of array expression A.
min(x,y) Returns the smallest element of the scalars x and y.
mod(x,y) Returns the integer modulus of x/y, i.e. mod(x,y)=x-floor(x/y)*y.
ndims(A) Returns the number of dimensions k of array expression A, with k >= 0.
noEvent(expr) Real elementary relations within expr are taken literally, i.e., no state or time event is triggered.
ones(n1,n2,n3,...) Return the n1 x n2 x n3 x ... Integer array with all elements equal to one (ni >=0 ).
outerProduct(v1,v2) Returns the outer product of vectors v1 and v2.
pre(y) Returns the  left limit  y(t^pre) of variable y(t) at a time instant t.
product(A) Returns the scalar product of all the elements of array expression A.
reinit(x subtype of Real, expr [Integer|Real]) Reinitializes state variable x with expr at an event instant.
rem(x,y) Returns the integer remainder of x/y, such that div(x,y) * y + rem(x, y) = x.
sample(start,interval) Returns true and triggers time events at time instants start + i*interval (i=0,1,...).
scalar(A) Returns the single element of array A. size(A,i) = 1 is required for 1 <= i <= ndims(A).
semiLinear(x, positiveSlope, negativeSlope) Returns "if x >= 0 then positiveSlope*x else negativeSlope*x". 
sign(v [Integer|Real]) Is expanded into (if v > 0 then 1 else if v < 0 then  1 else 0).
size(A,i) Returns the size of dimension i of array expression A where i shall be > 0 and <= ndims(A).
size(A) Returns a vector of length ndims(A) containing the dimension sizes of A.
skew(x) Returns the 3 x 3 skew symmetric matrix associated with a 3-vector.
smooth(p, expr) If p>=0 smooth(p, expr) returns expr and states that expr is p times continuously differentiable.
sqrt(v) Returns the square root of v if v>=0, otherwise an error occurs.
String([b|i|r|e], <options>) Convert a scalar non-String expression to a String representation.
sum(A) Returns the scalar sum of all the elements of array expression.
symmetric(A) Returns a symmetric diagonal matrix.
terminal() Returns true at the end of a successful analysis.
terminate(message) Successfully terminates the current analysis.
transpose(A) Permutes the first two dimensions of array A.
vector(A) Returns a 1-vector, if A is a scalar and otherwise returns a vector containing all the elements of the array.
zeros(n1,n2,n3,...) Returns the n1 x n2 x n3 x ... Integer array with all elements equal to zero (ni >= 0).

